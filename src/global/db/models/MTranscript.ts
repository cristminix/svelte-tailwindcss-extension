import { TranscriptSchema } from "./schema"
import DrizzleDB from "./DrizzleDB"

class MTranscript extends DrizzleDB {
  schema = TranscriptSchema

  async deleteByTocId(tocId: number) {
    // await this.deleteRows({tocId})
  }

  getListByTocId(tocId: number) {
    // return this.query({query: {tocId}})
  }
  getListByTocIdAsObject(tocId: number) {
    /*
    const results = this.getListByTocId(tocId)
    let transcripts = null
    if(results.length > 0){
        transcripts = {}
        for(const row of results){
            transcripts[row.lang] = row
        }
    }
    return transcripts
    */
  }
  getByLang(lang: string, tocId: number) {
    // return this.singleQuery({query: {lang,tocId}})
  }
  get(id: number) {
    // return this.singleQuery({query: {id}})
  }
  async createLegacy(tocId: number, lang: string, country: string, fmt: string, url: string, autoGenerated: number) {
    /*  
  let row = this.getByLang(lang,tocId)
    if(!row){
        const id = 0
        row = {id,tocId,lang,country,fmt,url,autoGenerated}
        row.id = this.db.insert(this.table,row)
        await this.db.commit()
    }else{
        console.error(`${this.constructor.name}.create() toc row exists`)
    }
    
    return row
    */
  }
}

export default MTranscript
