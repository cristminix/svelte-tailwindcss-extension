export const getTranscripts = async (vMetaDataNd: any, doc: JQuery, toc: any, mTranscript: any) => {
  let transcripts = null
  try {
    transcripts = mTranscript.getListByTocIdAsObject(toc.id)
  } catch (e) {
    console.error(e)
  }

  if (transcripts) {
    console.log("transcripts_get_from_m_transcript")
    return transcripts
  }

  let pgTranscriptNds: any = []
  if (vMetaDataNd) {
    pgTranscriptNds = vMetaDataNd.find("transcripts")
  }

  // let transcripts = null
  const tags = ["captionFormat", "isAutogenerated", "captionFile"]

  for (const pgTranscriptElem of pgTranscriptNds) {
    const pgTranscriptEl = jQuery(pgTranscriptElem)
    const locale = pgTranscriptEl.find("locale")

    if (locale.length > 0) {
      const lang = locale.find("country")

      if (lang.length > 0) {
        let langValue = lang.text().trim().toLowerCase()

        if (!transcripts) {
          transcripts = {}
        }

        transcripts[langValue] = {
          country: langValue,
        }

        const langCountry = locale.find("lang")

        if (langCountry.length > 0) {
          transcripts[langValue]["lang"] = langCountry.text().trim()
        }

        for (const tag of tags) {
          const tagNd = pgTranscriptEl.find(tag)

          if (tagNd.length > 0) {
            let value: any = tagNd.text().trim()

            if (tag === "isAutogenerated") {
              value = value === "true" ? 1 : 0
            }

            transcripts[langValue][tag] = value
          }
        }

        // transcripts[langValue] = mTranscript.create({
        //     tocId: toc.id,
        //     lang: langValue,
        //     country: transcripts[langValue]["country"],
        //     fmt: transcripts[langValue]["captionFormat"],
        //     url: transcripts[langValue]["captionFile"],
        //     autoGenerated: transcripts[langValue]["isAutogenerated"]
        // })
        const transcript = {
          lang: langValue,
          country: transcripts[langValue]["country"],
          fmt: transcripts[langValue]["captionFormat"],
          url: transcripts[langValue]["captionFile"],
          autoGenerated: transcripts[langValue]["isAutogenerated"],
        }
        const { country, fmt, url, autoGenerated } = transcript
        const row = await mTranscript.create(toc.id, langValue, country, fmt, url, autoGenerated)
        transcripts[langValue] = row
      }
    }
  }

  return transcripts
}
